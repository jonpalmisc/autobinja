#!/usr/bin/env python3
#
#  autobinja.py
#  https://github.com/jonpalmisc/autobinja
#
#  Copyright (c) 2022-2023 Jon Palmisciano. All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#
#  1. Redistributions of source code must retain the above copyright notice,
#     this list of conditions and the following disclaimer.
#
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
#  3. Neither the name of the copyright holder nor the names of its
#     contributors may be used to endorse or promote products derived from
#     this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#  CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)
#  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#  POSSIBILITY OF SUCH DAMAGE.
#

"""
Harness for automated headless analysis & patching with Binary Ninja

Usage: autobinja [-qwDBOh] [--output=PATH] [--refresh=N] <binary> [<script>]

Examples:
  autobinja -wD example.bin          # Wait for full analysis and save DB
  autobinja -B example.bin patch.py  # Run script and save patched binary

Arguments:
  binary        Path to target binary
  script        User script to run against the binary (optional)

Options:
  -q, --quiet           Silence all Binary Ninja log output
  -w, --wait            Wait for analysis to complete before running the script
  -r, --refresh=N       Check script readiness every N seconds (default: 5)
  -D, --save-db         Save an analysis database once the script is finished
  -B, --save-bin        Save the binary with any modifications from the script
  -O, --overwrite       Overwrite the input binary when saving modifications
  -o, --output=PATH     Custom output path (use with `-B`, overrides `-O`)
  -h, --help            Show this help message
"""

import datetime
import importlib.util as ilutil
import sys
import time
from types import ModuleType
from typing import Optional

from docopt import docopt


def timestamp() -> str:
    """Get the current local time in ISO-8601 form."""

    return datetime.datetime.now().isoformat()


def log(*args, **kwargs):
    """Log to standard output."""

    print(f"[Autobinja {timestamp()}]", *args, **kwargs)


def elog(*args, **kwargs):
    """Log to standard error."""

    print(f"[Autobinja {timestamp()}] Error:", *args, file=sys.stderr, **kwargs)


def load_user_script(path: Optional[str]) -> Optional[ModuleType]:
    """Load a user script as a Python module."""

    module = None

    spec = ilutil.spec_from_file_location("script", path)
    if spec:
        module = ilutil.module_from_spec(spec)

        if spec.loader:
            spec.loader.exec_module(module)

    return module


def main():
    args = docopt(__doc__)

    bin_path = args["<binary>"]
    refresh_rate = int(args["--refresh"] or 5)

    # Attempt to import the Binary Ninja API
    try:
        import binaryninja as bn
        from binaryninja import load
    except:
        elog("Could not import Binary Ninja module.")
        return

    log(
        f"Using {bn.core_product()} {bn.core_version()} ({hex(bn.core_build_id())}) as backend."
    )

    # Silence logs if requested.
    if args["--quiet"]:
        bn.disable_default_log()

    # Load user script as a module; if not provided, this will be `None`!
    script = load_user_script(args["<script>"])

    # Ensure the script has a `run` function if a script was provided; it is the
    # only method that absolutely has to be defined.
    if script and not hasattr(script, "run"):
        elog("Script must define a `run` function!")
        return

    # If the user script provides its own analysis options override function,
    # use the overrides provided; otherwise, don't make any changes. In either
    # case, the provided options are applied on top of the local user's default
    # Binary Ninja settings, which need to be accounted for.
    analysis_options = {}
    if script and hasattr(script, "analysis_options"):
        analysis_options = script.analysis_options()

    # The `update_analysis` option is set to false here since we want to start
    # analysis manually and manually control whether we wait for analysis to
    # finish or for a certain condition specified by the user script.
    log(f"Loading binary '{bin_path}'...")
    if not (bv := load(bin_path, update_analysis=False, options=analysis_options)):
        elog("Failed to initialize binary view!")
        return

    # The harness should wait for analysis to complete prior to running the
    # script if either the `-w` (wait) flag was passed, or if the user script
    # does not define a `is_ready` function.
    log("Starting analysis...")
    if args["--wait"] or not hasattr(script, "is_ready"):
        log("Waiting for analysis to complete...")
        bv.update_analysis_and_wait()
    else:
        bv.update_analysis()

        log("Waiting until user script is ready...")
        while not script.is_ready(bv):  # pyright: ignore
            time.sleep(refresh_rate)

    # Run the actual user script (if provided).
    if script:
        log(f"Running user script '{args['<script>']}'...")
        script.run(bv)

    # Save an analysis database and/or patched binary if requested.
    if args["--save-db"]:
        log(f"Saving analysis database...")
        bv.create_database(bin_path + ".bndb")
    if args["--save-bin"]:
        output_name = bin_path
        if args["--output"]:
            output_name = args["--output"]
        elif not args["--overwrite"]:
            output_name += ".out"

        log(f"Saving binary with modifications as '{output_name}'...")
        bv.save(output_name)

    # Analysis might still be going if the script uses a ready condition and
    # should be terminated before exiting.
    bv.abort_analysis()
    log("All tasks complete!")


if __name__ == "__main__":
    main()
